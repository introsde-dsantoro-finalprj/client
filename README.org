#+TITLE: IntroSDE Final Project - Daniele Santoro
#+AUTHOR: Daniele Santoro
#+DATE: 10/02/2016
* Introduction
  The application permits a person to add his personal information together with health information like weight, height and age (calculated from date of birth/birthdate). Moreover the person can add an indefinite number of meals and one goal per day, both with respective attributes.
  The system should store for each meal the datetime, the amount of calories and the type of meal. The goal of the day is defined with the day and the amount of calories.
  The person can also insert in the system the sport activities performed in a day with its amount of calories burned.
  Either the system automatically or the person manually should insert in the person profile the amount of calories burned during a regular day, this depends on weight, height and job type.
  Based on the sum of calories taken with meals, burned during sport activities and burned during regular day activities, the system should be able to compute if the person has reached the goal of the day or not.
  Optionally the system can calculate the amount of calories a person can assume during a regular day based on the weight and height and activities planned.
  
* Architecture
  The below image represent the deployed architecture:
  [[file:docs/architecture.png]]\\
  /The arrows shows which is the node that initiate the communication in order to read/write information, of course the messages are exchanged in both ways./

  All the components a part the DB service can be deployed in order to grant a fault-tolerance/high availability architecture simply decentralizing them on the network, increasing the number of instance of each service and putting load balancers/HA proxies in front of them. 
  
* Services Description
  Detailed documentation for all the services is present at this URL: http://docs.finalprjintrosdedsantoro.apiary.io/#
** DB Service
   - Name : dbws
   - Default Port : 6902
   - Heroku app URL: murmuring-spire-46621.herokuapp.com
   - Service endpoint: /ws/dbws

   This service is responsible to grant persistent on data modifications. It exposes to north-bound services basic CRUD operations using a SOAP service. SOAP methods for each entity in the model are translated into SQL query, which are finally executed in a remote MySQL DBMS instance.

   In the service has been used JPA in order to map class and ER models. Remote DB can be configured using EN_VARS, see: [[https://github.com/introsde-dsantoro-finalprj/dbws/blob/master/serviceSetup-example.sh][serviceSetup-example.sh]] script.
** Adapter Service
   - Name: adpws
   - Default Port: 6904
   - Heroku app URL: pure-scrubland-58213.herokuapp.com
   - Service endpoint: /ws/adpws
   
   This service has similar functionality as the previous one since it acts as a south-bound storage service. The main difference is that its scope is to adapt external data sources to the application domain and exposes those "transformed" data to the north-bound services. Currently support one external provider (api.foodessentials.com) but since it is based on an DAO pattern it can be easily extended to support more external data provider.

   It exposes a single REST API to the other services, but it include an interesting function on data transformation, please see the below section: /Interesting data flows/.

** Storage Service
   - Name: storagews
   - Default Port : 6903
   - Heroku app URL: damp-fortress-22612.herokuapp.com
   - Service endpoint: /ws/storagews

   This service act as a gateway for all the storage operations: it expose a SOAP interface to the north-bound services and two clients (REST to the adapter service and SOAP to the database service) in order to manage communication with south-bound storage services mentioned above. All north-bound services that needs to read/write data communicates only with this layer.

   A very important function of this component is that it hides completely what is "under the scenes" of the storage layer, for instance: type of DBMS used, language used to grant persistency, data providers details.

** Process centric Service
   - Name: pcsw
   - Default Port: 6905
   - Heroku app URL: secret-shelf-40531.herokuapp.com
   - Service endpoint: /ws/pcws

   Similarly to the previous, this service is responsible to redirect all call coming from clients to the appropriate south-bound service/s. It exposes a SOAP interface to clients but also implements two clients to communicate respectively with the business logic service, via REST and with the storage service via SOAP.

   This service act as orchestrator for the entire application, indeed it provides another important feature: it drives complex operations decoupling them into simple requests towards the south-bound services. See section /Interesting data flows/ for details.
   
** Business Logic service
   - Name: blsw
   - Default Port: 6909
   - Heroku app URL: desolate-spire-97481.herokuapp.com
   - Service endpoint: /ws/blws

   This service manages all the complex operations of the application, like heavy calculation or complex searches on the external data. It exposes a REST interface and uses a SOAP based client to retrieve data from the storage service.

   This service has been implemented in order to demonstrates that in a SOA architecture it is possible to have independent services, that in some cases are also highly decoupled (like in microservices architectures) services. In effect this service can be consumed from the process centric service but also from any other external service/user that needs to evaluate a goal based on some input data.

* Interesting data flows
** User insert a meal, goal or activity
** User search for meals
** User check status of its goal
** External data retrieving and adaptation
   1) tre chiamate per recupero dato esterno (link to food docs)
   2) conversione in formato per app
* Deployment and testing using the client
  All services are already deployed on [[https://www.heroku.com][Heroku]]. See service specific repository for more detail on how to deploy it.

  Each service retrieves *at run-time* URLs of dependent services using configuration in =ENVIRONENT VARIABLES=. This behavior simplified the deployment on Heroku during development.

  The client can be deployed on a remote machine connected to the Internet following instructions below.
** Client deploy and test
   1) Clone the repository
   2) Move into =client= folder
   3) Deploy with:
      #+BEGIN_EXAMPLE
      ant install
      #+END_EXAMPLE
   4) Set configuration ENV VARS:
      #+BEGIN_EXAMPLE
      #!/bin/bash
      export PCWS_ENDPOINT=secret-shelf-40531.herokuapp.com
      export PCWS_PORT=80
      #+END_EXAMPLE
   5) Start the client application
      #+BEGIN_EXAMPLE
      ant execute.client
      #+END_EXAMPLE
   6) Please be patient since services deployed on Heroku app could be sleeping...
* TODO Notes
 - suggestion fabbisogno calorico
 - percentuale taken rispetto a burned
 - calorie ancora da bruciare rispetto ora del giorno
 - cibi consigliati (presi da ext rources) --> lo fa bl oppure pc
 - controllo se arivo da menu admin
