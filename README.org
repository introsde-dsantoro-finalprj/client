#+TITLE: IntroSDE Final Project - Daniele Santoro
#+AUTHOR: Daniele Santoro
#+DATE: 10/02/2016
* Introduction
  The application permits a person to add his personal information together with health information like weight, height and age (calculated from date of birth/birthdate). Moreover the person can add an indefinite number of meals and one goal per day, both with respective attributes.
  The system should store for each meal the datetime, the amount of calories and the type of meal. The goal of the day is defined with the day and the amount of calories.
  The person can also insert in the system the sport activities performed in a day with its amount of calories burned.
  Either the system automatically or the person manually should insert in the person profile the amount of calories burned during a regular day, this depends on weight, height and job type.
  Based on the sum of calories taken with meals, burned during sport activities and burned during regular day activities, the system should be able to compute if the person has reached the goal of the day or not.
  Optionally the system can calculate the amount of calories a person can assume during a regular day based on the weight and height and activities planned.
  
* Architecture
  The below image represent the deployed architecture:
  [[file:docs/architecture.png]]\\
  /The arrows shows which is the node that initiate the communication in order to read/write information, of course the messages are exchanged in both ways./
* Services Description
  Detailed documentation for all the services is present at this URL: http://docs.finalprjintrosdedsantoro.apiary.io/#
** DB Service
   - Name : dbws
   - Default Port : 6902
   - Heroku app URL: murmuring-spire-46621.herokuapp.com
   - Service endpoint: /ws/dbws

   This service...

** Storage Service
   - Name: storagews
   - Default Port : 6903
   - Heroku app URL: damp-fortress-22612.herokuapp.com
   - Service endpoint: /ws/storagews
** Adapter Service
   - Name: adpws
   - Default Port: 6904
   - Heroku app URL: pure-scrubland-58213.herokuapp.com
   - Service endpoint: /ws/adpws
** Process centric Service
   - Name: pcsw
   - Default Port: 6905
   - Heroku app URL: secret-shelf-40531.herokuapp.com
   - Service endpoint: /ws/pcws
** Business Logic service
   - Name: blsw
   - Default Port: 6909
   - Heroku app URL: desolate-spire-97481.herokuapp.com
   - Service endpoint: /ws/blws
* Interesting data flows
** User insert a meal, goal or activity
** User search for meals
** User check status of its goal
** External data retrieving and adaptation
   1) tre chiamate per recupero dato esterno (link to food docs)
   2) conversione in formato per app
* Deployment and testing using the client
  All services are already deployed on [[https://www.heroku.com][Heroku]]. See service specific repository for more detail on how to deploy it.

  Each service retrieves *at run-time* URLs of dependent services using configuration in =ENVIRONENT VARIABLES=. This behavior simplified the deployment on Heroku during development.

  The client can be deployed on a remote machine connected to the Internet following instructions below.
** Client deploy and test
   1) Clone the repository
   2) Move into =client= folder
   3) Deploy with:
      #+BEGIN_EXAMPLE
      ant install
      #+END_EXAMPLE
   4) Set configuration ENV VARS:
      #+BEGIN_EXAMPLE
      #!/bin/bash
      export PCWS_ENDPOINT=secret-shelf-40531.herokuapp.com
      export PCWS_PORT=80
      #+END_EXAMPLE
   5) Start the client application
      #+BEGIN_EXAMPLE
      ant execute.client
      #+END_EXAMPLE
   6) Please be patient since services deployed on Heroku app could be sleeping...
* TODO Notes
 - suggestion fabbisogno calorico
 - percentuale taken rispetto a burned
 - calorie ancora da bruciare rispetto ora del giorno
 - cibi consigliati (presi da ext rources) --> lo fa bl oppure pc
 - controllo se arivo da menu admin
* Questions
  1) How can I have my data model structure shared between services ? Can I just share the model package or do I have to manually/programmatically marshall and unmarshall objects between services mapping each fields ?
  2) Architecture validation
  3) Is the first "storage services" layer just a gateway to redirect the message on the underling data-sources ? It is similar to the process centric services in my opinion, right ?
  4) Should we use BPEL language for composition and orchestration ?
  5) Doubts on idem-potency in REST if another actor change the resource during my repetitive calls.
  6) Issue with OneToMany on Parent -> Child and JAXB binding
     Think to have a Parent class connected with a Child class with a OneToMany relation. We have child object attribute in Parent and parent object attribute in Child.

     Now, in child we must mark =getParent()= method with @XmlTransient otherwise we have a cycle when marshall and unmarshall Parent.

     This create issues when saving a Parent containing children through SOAP because the Parent reference inside the Child is not unmarshalled and murshalled properly.
     
     - http://stackoverflow.com/questions/3073364/jaxb-mapping-cyclic-references-to-xml
     - http://stackoverflow.com/questions/17295370/a-cycle-is-detected-in-the-object-graph-this-will-cause-infinitely-deep-xml
     - http://stackoverflow.com/questions/17576823/this-will-cause-infinitely-deep-xml
     - http://blog.bdoughan.com/2010/07/jpa-entities-to-xml-bidirectional.html
     - http://stackoverflow.com/questions/13957068/using-moxy-to-avoid-cycle-xmlinversereference-xmlid
      
