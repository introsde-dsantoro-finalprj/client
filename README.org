#+TITLE: IntroSDE Final Project - Daniele Santoro
#+AUTHOR: Daniele Santoro
#+DATE: 10/02/2016
* Introduction
  The main focus of this application (composed by 5 different services) is to demonstrate the implementation of a SOA architecture; the use-case chosen is related to person life status, indeed it try to help people to eat healthy managing meals, sport activities and goals.

  It permits a person to add his personal information together with health information like weight, height and age. Moreover it allows the insertion of meals and activities during a day with respective amount of calories taken or burned. It has a search function to find out best meals from external provider and finally permits users to add day based target/goals in term of amount of calories taken per day.
  
  The system stores all these information helping users to track the life style and it calculate the person health status giving suggestion based on historical user data.

* Architecture
  The below image represent the deployed architecture:
  [[file:docs/architecture.png]]\\
  /The arrows shows which is the node that initiate the communication in order to read/write information, of course the messages are exchanged in both ways./

  All the components a part the DB service can be deployed in order to grant a fault-tolerance/high availability architecture simply decentralizing them on the network, increasing the number of instance of each service and putting load balancers/HA proxies in front of them. 
  
* Services Description
  Detailed documentation about the API used by all the services is present at this URL: http://docs.finalprjintrosdedsantoro.apiary.io/#
** DB Service
   - Name : dbws
   - Default Port : 6902
   - Heroku app URL: murmuring-spire-46621.herokuapp.com
   - Service endpoint: /ws/dbws

   This service is responsible to grant persistent on data modifications. It exposes to north-bound services basic CRUD operations using a SOAP service. SOAP methods for each entity in the model are translated into SQL query, which are finally executed in a remote MySQL DBMS instance.

   In the service has been used JPA in order to map class and ER models. Remote DB can be configured using EN_VARS, see: [[https://github.com/introsde-dsantoro-finalprj/dbws/blob/master/serviceSetup-example.sh][serviceSetup-example.sh]] script.
** Adapter Service
   - Name: adpws
   - Default Port: 6904
   - Heroku app URL: pure-scrubland-58213.herokuapp.com
   - Service endpoint: /ws/adpws
   
   This service has similar functionality as the previous one since it acts as a south-bound storage service. The main difference is that its scope is to adapt external data sources to the application domain and exposes those "transformed" data to the north-bound services. Currently support one external provider (api.foodessentials.com) but since it is based on an DAO pattern it can be easily extended to support more external data provider.

   It exposes a single REST API to the other services, but it include an interesting function on data transformation, please see the below section: /Interesting data flows/.

** Storage Service
   - Name: storagews
   - Default Port : 6903
   - Heroku app URL: damp-fortress-22612.herokuapp.com
   - Service endpoint: /ws/storagews

   This service act as a gateway for all the storage operations: it expose a SOAP interface to the north-bound services and two clients (REST to the adapter service and SOAP to the database service) in order to manage communication with south-bound storage services mentioned above. All north-bound services that needs to read/write data communicates only with this layer.

   A very important function of this component is that it hides completely what is "under the scenes" of the storage layer, for instance: type of DBMS used, language used to grant persistency, data providers details.

** Process centric Service
   - Name: pcsw
   - Default Port: 6905
   - Heroku app URL: secret-shelf-40531.herokuapp.com
   - Service endpoint: /ws/pcws

   Similarly to the previous, this service is responsible to redirect all call coming from clients to the appropriate south-bound service/s. It exposes a SOAP interface to clients but also implements two clients to communicate respectively with the business logic service, via REST and with the storage service via SOAP.

   This service act as orchestrator for the entire application, indeed it provides another important feature: it drives complex operations decoupling them into simple requests towards the south-bound services. See section /Interesting data flows/ for details.
   
** Business Logic service
   - Name: blsw
   - Default Port: 6909
   - Heroku app URL: desolate-spire-97481.herokuapp.com
   - Service endpoint: /ws/blws

   This service manages all the complex operations of the application, like heavy calculation or complex searches on the external data. It exposes a REST (with full HATEOAS constraint) interface and uses a SOAP based client to retrieve data from the storage service.

   This service has been implemented in order to demonstrates that in a SOA architecture it is possible to have independent services, that in some cases are also highly decoupled (like in microservices architectures) services. In effect this service can be consumed from the process centric service but also from any other external service/user that needs to evaluate a goal based on some input data.

* Interesting data flows
** User insert a meal, goal or activity
   When the user insert from the client application a meal, a goal or an activity, the process centric service react first of all storing new data into the persitent storage and then controlling if the goal has been achieved or not. It sends the goal, the list of calories burned and taken to the business logic service, which in turn calculate the results and only if goals has been reached suggests a list of "safe"  meals to the user.
** User search for meals
   When a user search for meal from the client application, it inserts a search key. The key is passed to the storage service which in turn call the adapter service. In the adapter service data is retrieved from an external source, converted and then sent back to the client in the same way. The client can move to see other results (last call sequence is repeated with new parameters) or choose to insert the meal just retrieved from the external data source to its meals of the day, calling the first process described above.
** User check status of its goal
   When user submits input to calculate his goal evaluation using the client, the process centric service pass the data to the business logic service via POST, a new resource (goalCheck) is stored on an in-memory DB and a location to the new resource is returned. The process centric service visits the newly created resource and follow the contained link (~rel=goalEval~) in order to get the goal evaluation resource.
** External data retrieving and adaptation
   Once the adapter service retrieves data from the external provider (api.foodessentials.com) it makes three calls:
   1) Get a session ID using configurable (ENV_VARS) token via HTTP call and gets a Json response
   2) Get the list of meals via HTTP call and gets a Json response
   3) For each list retrieves the specified calories via another HTTP call and gets a Json response
   4) Combine the meal details retrieved from 2) and the meal calories retrieved from 3) into an XML data structure compliant with the application domain model.
* Deployment and testing using the client
  All services are already deployed on [[https://www.heroku.com][Heroku]]. See service specific repository for more details on how to deploy it.

  Each service *retrieves at run-time* URLs of dependent services (like internal services, external DB or data-providers) using configurations stored in *environment variables*. This behavior simplify the deployment on different systems, like Heroku or other PaaS providers. It helped also during the development assuring the application is portable and services can be decentralized.

  The client can be deployed on any machine (with JVM) connected to the Internet, following instructions below.
** Client deploy and test
   1) Clone the repository
      #+BEGIN_EXAMPLE
      git clone https://github.com/introsde-dsantoro-finalprj/client 
      #+END_EXAMPLE
   2) Move into =client= folder
      #+BEGIN_EXAMPLE
      cd client
      #+END_EXAMPLE
   3) Deploy with:
      #+BEGIN_EXAMPLE
      ant install
      #+END_EXAMPLE
   4) Set configuration ENV VARS:
      #+BEGIN_EXAMPLE
      #!/bin/bash
      export PCWS_ENDPOINT=secret-shelf-40531.herokuapp.com
      export PCWS_PORT=80
      #+END_EXAMPLE
   5) Start the client application
      #+BEGIN_EXAMPLE
      ant execute.client
      #+END_EXAMPLE
   6) Please be patient since services deployed on Heroku app could be sleeping...

